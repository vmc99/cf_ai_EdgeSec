{"id": "e09d6df669e4ad0d8eee1710aa48d081_chunk_0", "text": "# Cloudflare WAF Custom Rules ## Overview Cloudflare WAF (Web Application Firewall) custom rules allow you to create tailored security rules to protect your web applications from various threats. ## Rule Components ### Expression The expression field uses Cloudflare's Rules language to define when a rule should match. Common fields include: - `http.request.uri.path` - The request path - `http.request.uri.query` - The query string - `http.request.method` - HTTP method (GET, POST, etc.) - `ip.src` - Source IP address - `ip.geoip.country` - Country of origin - `ip.geoip.asnum` - ASN (Autonomous System Number) - `cf.threat_score` - Cloudflare threat score (0-100) - `cf.bot_management.score` - Bot detection score ### Actions Available actions for custom rules: 1. **Log** - Record the request without taking action 2. **Challenge** - Present a CAPTCHA challenge 3. **JS Challenge** - JavaScript-based challenge 4. **Managed Challenge** - Smart challenge based on client reputation 5. **Block** - Block the request completely ### Best Practices 1. **Start with Log Mode** - Always test rules in log mode first - Monitor for false positives - Gradually escalate to challenge/block 2. **Use Specific Expressions** - Target specific patterns rather than broad rules - Combine multiple conditions for accuracy - Consider geo-blocking carefully (compliance!) 3. **Rate Limiting** - Implement rate limits for high-risk endpoints - Use appropriate thresholds (10-1000 req/min) - Consider legitimate burst traffic 4. **Security Patterns** **SQL Injection:** ``` (http.request.uri.query contains \"union select\" or http.request.uri.query contains \"drop table\") ``` **Path Traversal:** ``` (http.request.uri.path contains \"..\" or http.request.uri.path contains \"%2e%2e\") ``` **XSS:** ``` (http.request.uri.query contains \"<script\" or http.request.uri.query contains \"javascript:\") ``` ## Rate Limiting Cloudflare Rate Limiting allows you to protect your application from abuse: ### Configuration - **Threshold**: Number of requests per period - **Period**: Time window (10s, 1m, 1h, etc.) - **Action**: Challenge, block, or log - **Characteristics**: Match by IP, headers, or other fields ### Example Rate Limits - API endpoints: 100 requests/10s per IP - Login pages: 5 requests/1m per IP - Search endpoints: 50 requests/10s per IP ## Documentation References - [Cloudflare Firewall Rules](https://developers.cloudflare.com/firewall/) - [Rate Limiting](https://developers.cloudflare.com/waf/rate-limiting/) - [Rules Language](https://developers.cloudflare.com/ruleset-engine/rules-language/)", "metadata": {"type": "doc", "source": "cloudflare_docs", "title": "Cloudflare Waf Rules", "filename": "cloudflare_waf_rules.md", "chunk_index": 0, "total_chunks": 1}}
{"id": "93111bcd398359b7032e639efbb7cb93_chunk_0", "text": "# Security Runbook: SQL Injection Response ## Threat Overview SQL Injection (SQLi) is a critical security vulnerability where attackers inject malicious SQL code into application queries to: - Extract sensitive data - Modify database contents - Execute administrative operations - Bypass authentication ## Detection Indicators - Query strings containing SQL keywords: `UNION`, `SELECT`, `DROP`, `INSERT`, `UPDATE` - SQL comment patterns: `--`, `/*`, `*/` - String terminators: `'`, `\"` - Logic operators: `OR '1'='1'`, `AND 1=1` - Encoded variations: `%27` ('), `%2D` (-) ## Immediate Response Steps ### 1. Identify Affected Resources - Review firewall events for SQL injection patterns - Identify targeted endpoints (commonly: login, search, API endpoints) - Document attacking IP addresses and ASNs - Check for successful exploits in application logs ### 2. Immediate Mitigation **Deploy WAF Rule (Priority: CRITICAL)** ``` Expression: (http.request.uri.query contains \"union select\" or http.request.uri.query contains \"drop table\" or http.request.uri.query contains \"' or '1'='1'\" or http.request.uri.query contains \"-- \") Action: BLOCK Priority: HIGH ``` **Rate Limiting:** - Apply aggressive rate limiting to affected endpoints - Threshold: 10 requests/minute per IP for suspected IPs ### 3. Investigation - Pull full access logs for last 24 hours - Identify all requests from attacking IPs - Check application logs for database errors - Review database audit logs for unauthorized queries - Assess data exfiltration risk ### 4. Containment - Block attacking IP ranges if pattern is clear - Temporarily disable vulnerable endpoints if needed - Enable database query logging - Implement additional monitoring ### 5. Remediation **Application Level:** - Implement parameterized queries/prepared statements - Add input validation and sanitization - Enable SQL error suppression in production - Update ORM/framework to latest version **WAF Configuration:** - Deploy custom rule for specific attack patterns - Enable Cloudflare's SQL Injection managed ruleset - Configure alerts for SQL injection attempts ### 6. Post-Incident - Conduct security audit of database access - Review all application code for SQLi vulnerabilities - Update security documentation - Schedule penetration testing - File incident report ## False Positive Handling Some legitimate queries may trigger SQL injection rules: **Common FPs:** - Search queries with SQL-like terms - Developer tools and debugging - Legitimate API calls with complex parameters **Solution:** - Whitelist known good IPs (office, development) - Create exceptions for specific endpoints - Use challenge instead of block for borderline cases ## Prevention Checklist - [ ] Use parameterized queries everywhere - [ ] Implement input validation - [ ] Apply principle of least privilege to DB users - [ ] Enable WAF with SQL injection ruleset - [ ] Monitor and alert on SQLi patterns - [ ] Regular security training for developers - [ ] Automated security testing in CI/CD ## Escalation **Severity: CRITICAL** - Security team: immediate notification - Development team: within 1 hour - Management: if data breach suspected - Legal/Compliance: if PII accessed ## References - [OWASP SQL Injection](https://owasp.org/www-community/attacks/SQL_Injection) - [Cloudflare SQL Injection Protection](https://developers.cloudflare.com/waf/managed-rules/) - Internal security policy: SEC-001", "metadata": {"type": "runbook", "source": "security_playbooks", "title": "Sql Injection Response", "filename": "sql_injection_response.md", "chunk_index": 0, "total_chunks": 2}}
{"id": "93111bcd398359b7032e639efbb7cb93_chunk_1", "text": "team: immediate notification - Development team: within 1 hour - Management: if data breach suspected - Legal/Compliance: if PII accessed ## References - [OWASP SQL Injection](https://owasp.org/www-community/attacks/SQL_Injection) - [Cloudflare SQL Injection Protection](https://developers.cloudflare.com/waf/managed-rules/) - Internal security policy: SEC-001", "metadata": {"type": "runbook", "source": "security_playbooks", "title": "Sql Injection Response", "filename": "sql_injection_response.md", "chunk_index": 1, "total_chunks": 2}}
{"id": "03c8142f594f06af24edd57b736e3345_chunk_0", "text": "# Security Runbook: DDoS Mitigation ## Threat Overview Distributed Denial of Service (DDoS) attacks overwhelm your infrastructure with massive traffic volumes, making services unavailable to legitimate users. ## Attack Types 1. **Volumetric**: Floods bandwidth (UDP floods, ICMP floods) 2. **Protocol**: Exploits protocol weaknesses (SYN floods, fragmented packets) 3. **Application Layer**: Targets web application (HTTP floods, slowloris) ## Detection Indicators - Sudden traffic spike (>500% normal) - High request rate from limited IP ranges - Abnormal geographic traffic patterns - Increased error rates (503, 504) - Slow response times - Resource exhaustion alerts ## Immediate Response Steps ### 1. Verify Attack - Check Cloudflare Analytics dashboard - Identify traffic patterns (requests/second) - Analyze source IPs, ASNs, countries - Determine attack vector (L3/L4 vs L7) ### 2. Activate Cloudflare DDoS Protection **Enable \"I'm Under Attack Mode\"** - Activates aggressive challenge for all visitors - Temporary measure (5-15 minutes) - Allows time for investigation **Configure Rate Limiting:** ``` Threshold: 100 requests per 10 seconds Scope: Per IP address Action: Challenge (escalate to Block if needed) ``` ### 3. Identify Attack Characteristics **High-Volume from Few IPs:** ``` WAF Rule: Expression: ip.src in {<attacking_ips>} Action: BLOCK ``` **Geographic Concentration:** ``` Expression: ip.geoip.country in {\"CN\" \"RU\" \"KP\"} Action: Challenge Note: Use carefully, ensure compliance! ``` **Specific ASN:** ``` Expression: ip.geoip.asnum eq AS12345 Action: BLOCK Duration: 24 hours ``` **Bot-driven:** ``` Expression: cf.bot_management.score lt 30 Action: Managed Challenge ``` ### 4. Application-Layer DDoS **API Endpoint Abuse:** ``` Expression: http.request.uri.path eq \"/api/search\" Rate Limit: 10 requests/10s per IP Action: Block on exceed ``` **POST Flood:** ``` Expression: http.request.method eq \"POST\" and http.request.uri.path eq \"/login\" Rate Limit: 5 requests/minute per IP Action: Challenge ``` ### 5. Advanced Mitigation **Cloudflare Features to Enable:** - [x] Caching (aggressive for static content) - [x] Page Rules (cache everything on specific paths) - [x] Firewall Rules (block malicious patterns) - [x] Rate Limiting (per endpoint) - [x] Bot Management (if available) - [x] DDoS managed ruleset **Load Balancer:** - Enable health checks - Implement failover to backup origins - Use load balancing for traffic distribution ### 6. Monitoring & Adjustment **Track Metrics:** - Requests per second (target: back to baseline) - Origin load (CPU, memory, connections) - Error rate (target: <1%) - Response time (target: <500ms) **Iterate:** - Adjust rate limits based on effectiveness - Refine WAF rules to reduce false positives - Gradually disable \"Under Attack Mode\" after stabilization ## Post-Attack Actions ### 1. Incident Analysis - Document attack timeline - Calculate impact (downtime, traffic volume) - Identify attack attribution if possible - Review effectiveness of mitigations ### 2. Infrastructure Hardening - Increase origin capacity if needed - Implement auto-scaling - Review and optimize application performance - Enable additional Cloudflare features ### 3. Update Response Plan - Document lessons learned - Update escalation procedures - Conduct team post-mortem - Update monitoring thresholds ## Prevention Strategies **Ongoing:** - Monitor traffic patterns for anomalies - Set up alerts for traffic spikes - Maintain updated contact lists - Regular DDoS simulation drills **Cloudflare Configuration:** -", "metadata": {"type": "runbook", "source": "security_playbooks", "title": "Ddos Mitigation", "filename": "ddos_mitigation.md", "chunk_index": 0, "total_chunks": 2}}
{"id": "03c8142f594f06af24edd57b736e3345_chunk_1", "text": "3. Update Response Plan - Document lessons learned - Update escalation procedures - Conduct team post-mortem - Update monitoring thresholds ## Prevention Strategies **Ongoing:** - Monitor traffic patterns for anomalies - Set up alerts for traffic spikes - Maintain updated contact lists - Regular DDoS simulation drills **Cloudflare Configuration:** - Always-on DDoS protection (enabled by default) - Proper DNS configuration (proxied through CF) - Rate limiting on critical endpoints - WAF rules for common attack patterns ## Escalation Path 1. **Tier 1 (0-5 min)**: DevOps/SRE team 2. **Tier 2 (5-15 min)**: Security team + Management 3. **Tier 3 (15-30 min)**: Cloudflare Enterprise Support 4. **Tier 4 (30+ min)**: Executive team, PR if public-facing ## Contact Information - Cloudflare Support: https://dash.cloudflare.com/support - Emergency Hotline: [Your emergency contact] - Security Team: security@company.com - DevOps On-Call: [PagerDuty link] ## Success Criteria - [ ] Traffic back to normal levels - [ ] Error rate <1% - [ ] Origin load <70% - [ ] No legitimate user complaints - [ ] Incident documented - [ ] Preventive measures implemented", "metadata": {"type": "runbook", "source": "security_playbooks", "title": "Ddos Mitigation", "filename": "ddos_mitigation.md", "chunk_index": 1, "total_chunks": 2}}
